{"version":3,"sources":["components/navbar.js","layouts/styled/index.js","routes.js","layouts/index.js","App.js","serviceWorker.js","index.js","theme.js"],"names":["StyledNavbar","styled","ul","NavbarItem","li","props","active","theme","white","grey","config","title","href","StyledTransitionAnimation","div","yellow","Navbar","location","useLocation","history","useHistory","useState","loading","setLoading","unsubscribeFromHistory","listen","timmer","setTimeout","clearTimeout","map","nav","idx","pathname","key","onClick","routerTimmer","push","hangleRouter","Globalstyle","createGlobalStyle","darkBlue","route","component","fallback","renderRoutes","routes","path","exact","lazy","createBrowserHistory","App","Boolean","window","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","rootDOM","document","getElementById","ReactDOM","render","lightBlue"],"mappings":"kvCAKA,IAAMA,EAAeC,IAAOC,GAAV,KAoBZC,EAAaF,IAAOG,GAAV,KAGH,SAAAC,GAAK,OAAKA,EAAMC,OAASC,IAAMC,MAAQD,IAAME,QAWpDC,EAAS,CACb,CACEC,MAAO,OACPC,KAAM,KAER,CACED,MAAO,WACPC,KAAM,cAIJC,EAA4BZ,IAAOa,IAAV,IAGTP,IAAMQ,QAgBb,SAASC,IACtB,IAAMC,EAAWC,cACXC,EAAUC,cAFe,EAmBDC,oBAAS,GAnBR,mBAmBxBC,EAnBwB,KAmBfC,EAnBe,KAoBzBC,EAAyBL,EAAQM,QATV,WAC3BD,IAEA,IAAME,EAASC,YAAW,WACxBC,aAAaF,GACbH,GAAW,KACV,QAIL,OACE,kBAAC,WAAD,KACE,kBAACvB,EAAD,KACGU,EAAOmB,KAAI,SAACC,EAAKC,GAAN,OACV,kBAAC5B,EAAD,CACEG,OAAQwB,EAAIlB,OAASK,EAASe,SAC9BC,IAAG,kBAAaF,GAChBG,QAAS,kBAzBE,SAAC,GAAc,IAAZtB,EAAW,EAAXA,KACtBW,GAAW,GACX,IAAMY,EAAeR,YAAW,WAC9BR,EAAQiB,KAAKxB,GACbgB,aAAaO,KACZ,KAoBoBE,CAAa,CAAEzB,KAAMkB,EAAIlB,SAEvCkB,EAAInB,WAIVW,EAAU,kBAACT,EAAD,CAA2BP,OAAQgB,IAAc,I,+TCpG3D,IAAMgB,EAAcC,YAAH,IAYAhC,IAAMiC,UCbf,OACb,CACEC,MAAO,IACPC,UCCW,SAAgBrC,GAAQ,IAC7BoC,EAAUpC,EAAVoC,MACR,OACE,kBAAC,WAAD,KACE,kBAACH,EAAD,MACA,kBAACtB,EAAD,MACA,kBAAC,WAAD,CAAU2B,SAAS,IAAIC,YAAaH,EAAMI,WDN5CA,OAAQ,CACN,CACEC,KAAM,IACNC,OAAO,EACPL,UAAWM,gBAAK,kBAAM,kCAExB,CACEF,KAAM,YACNC,OAAO,EACPL,UAAWM,gBAAK,kBAAM,qCEVxB7B,EAAU8B,cAKDC,MAJf,WACE,OAAO,kBAAC,IAAD,CAAQ/B,QAASA,GAAUyB,YAAaC,KCK7BM,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MAAM,2DA2G5B,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaL,gB,aCtHnBE,IAEA,IAAMI,EAAUC,SAASC,eAAe,QAExCC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJJ,GAMFJ,K,gCCzBe,KACbjB,SAAU,UACV0B,UAAW,UACX1D,MAAO,UACPC,KAAM,UACNM,OAAQ,a","file":"static/js/main.d222f019.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport styled from 'styled-components'\nimport theme from 'theme'\nimport { useLocation, useHistory } from 'react-router'\n\nconst StyledNavbar = styled.ul`\n  width: 100%;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 auto;\n  list-style: none;\n  flex-wrap: wrap;\n  @media (min-width: 576px) {\n    max-width: 540px;\n  }\n  @media (min-width: 768px) {\n    max-width: 720px;\n  }\n  @media (min-width: 992px) {\n    max-width: 960px;\n  }\n`\n\nconst NavbarItem = styled.li`\n  &,\n  & > a {\n    color: ${props => (props.active ? theme.white : theme.grey)};\n    text-decoration: none;\n    padding: 0.5rem 1rem;\n  }\n  text-align: center;\n  margin: 0 1.5rem;\n  cursor: pointer;\n  user-select: none;\n  font-size: 20px;\n`\n\nconst config = [\n  {\n    title: 'Home',\n    href: '/'\n  },\n  {\n    title: 'Projects',\n    href: '/projects'\n  }\n]\n\nconst StyledTransitionAnimation = styled.div`\n  width: 200%;\n  height: 100%;\n  background-color: ${theme.yellow};\n  position: fixed;\n  top: 0;\n  left: 100%;\n  z-index: 999;\n  animation: left 1s ease-in-out;\n  @keyframes left {\n    from {\n      left: 200%;\n    }\n    to {\n      left: -200%;\n    }\n  }\n`\n\nexport default function Navbar() {\n  const location = useLocation()\n  const history = useHistory()\n  const hangleRouter = ({ href }) => {\n    setLoading(true)\n    const routerTimmer = setTimeout(() => {\n      history.push(href)\n      clearTimeout(routerTimmer)\n    }, 500)\n  }\n\n  const handleLocationChange = () => {\n    unsubscribeFromHistory()\n\n    const timmer = setTimeout(() => {\n      clearTimeout(timmer)\n      setLoading(false)\n    }, 500)\n  }\n  const [loading, setLoading] = useState(false)\n  const unsubscribeFromHistory = history.listen(handleLocationChange)\n  return (\n    <Fragment>\n      <StyledNavbar>\n        {config.map((nav, idx) => (\n          <NavbarItem\n            active={nav.href === location.pathname}\n            key={`navItem-${idx}`}\n            onClick={() => hangleRouter({ href: nav.href })}\n          >\n            {nav.title}\n          </NavbarItem>\n        ))}\n      </StyledNavbar>\n      {loading ? <StyledTransitionAnimation active={loading} /> : ''}\n    </Fragment>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\nimport theme from 'theme'\n\nexport const Globalstyle = createGlobalStyle`\n  * {\n    /* border: 1px solid; */\n    box-sizing: border-box;\n    position: relative;\n  }\n  body {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    font-family: Poppins, sans-serif;\n    background-color: ${theme.darkBlue};\n  }\n`\n","import { lazy } from 'react'\nimport Layout from './layouts'\nexport default [\n  {\n    route: '*',\n    component: Layout,\n    routes: [\n      {\n        path: '/',\n        exact: true,\n        component: lazy(() => import('pages'))\n      },\n      {\n        path: '/projects',\n        exact: true,\n        component: lazy(() => import('pages/projects'))\n      }\n    ]\n  }\n]\n","import Navbar from 'components/navbar'\nimport React, { Fragment, Suspense } from 'react'\n\nimport { Globalstyle } from './styled'\nimport { renderRoutes } from 'react-router-config'\n\nexport default function Layout(props) {\n  const { route } = props\n  return (\n    <Fragment>\n      <Globalstyle />\n      <Navbar />\n      <Suspense fallback=\"\">{renderRoutes(route.routes)}</Suspense>\n    </Fragment>\n  )\n}\n","import React from 'react'\nimport { Router } from 'react-router-dom'\nimport { renderRoutes } from 'react-router-config'\nimport { createBrowserHistory } from 'history'\nimport routes from './routes'\nconst history = createBrowserHistory()\nfunction App() {\n  return <Router history={history}>{renderRoutes(routes)}</Router>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { BrowserRouter, Switch } from 'react-router-dom'\n\nserviceWorker.unregister()\n\nconst rootDOM = document.getElementById('root')\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <App />\n    </Switch>\n  </BrowserRouter>,\n  rootDOM\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","export default {\n  darkBlue: '#1f2b3b',\n  lightBlue: '#324359',\n  white: '#ffffff',\n  grey: '#808080',\n  yellow: '#ff8a00'\n}\n"],"sourceRoot":""}